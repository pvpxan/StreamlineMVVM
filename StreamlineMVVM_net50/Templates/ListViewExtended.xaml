<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ext="clr-namespace:StreamlineMVVM">

    <!-- START ListView Default Colors -->
    <SolidColorBrush x:Key="Item.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Item.Static.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="Item.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Item.Disabled.Border" Color="#FFD9D9D9"/>
    <!-- END ListView Default Colors -->

    <Style x:Key="ListViewExtended" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{StaticResource Item.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Item.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.Disabled.Border}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- START ListViewItem Default Colors -->
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
    <!-- END ListViewItem Default Colors -->

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemExtended" TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ext:Extensions.SelectionInactiveBackground" Value="{StaticResource Item.SelectedInactive.Background}"/>
        <Setter Property="ext:Extensions.SelectionInactiveBorder" Value="{StaticResource Item.SelectedInactive.Border}"/>
        <Setter Property="ext:Extensions.SelectionActiveBackground" Value="{StaticResource Item.SelectedActive.Background}"/>
        <Setter Property="ext:Extensions.SelectionActiveBorder" Value="{StaticResource Item.SelectedActive.Border}"/>
        <Setter Property="ext:Extensions.MouseOverBackground" Value="{StaticResource Item.MouseOver.Background}"/>
        <Setter Property="ext:Extensions.MouseOverBorder" Value="{StaticResource Item.MouseOver.Border}"/>
        <Setter Property="ext:Extensions.CommandParameter" Value="{x:Null}"/>
        <Setter Property="ext:Extensions.Command" Value="{x:Null}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid>
                            <GridViewRowPresenter x:Name="gridrowPresenter" Content="{TemplateBinding Property=ContentControl.Content}" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Property=ContentControl.Content}" Visibility="Collapsed" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <!-- Bind the double click to a command in the parent view model -->
                        <Border.InputBindings>
                            <MouseBinding Gesture="LeftDoubleClick" 
                                  CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.CommandParameter)}"
                                  Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.Command)}"/>
                        </Border.InputBindings>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.SelectionInactiveBackground)}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.SelectionInactiveBorder)}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.SelectionActiveBackground)}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.SelectionActiveBorder)}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.MouseOverBackground)}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListViewItem}, Path=(ext:Extensions.MouseOverBorder)}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>